use these only tailwindcss@^3 + vue 2 + laravel 10 + mysql

** UPDATED PROJECT STATUS **
--------------------------------------------------------------
"🎯 Objective: Full-featured web-based University Event Management System

**COMPLETED FEATURES:**
✅ User authentication + role-based access
✅ Event creation & approval workflow
✅ Event listing with advanced search & filters
✅ Registration & QR check-in system
✅ Email notifications (Gmail SMTP)
✅ Real-time notifications (Pusher WebSocket)
✅ Event calendar view (FullCalendar integration)
✅ Feedback & rating system
✅ Admin dashboard with analytics
✅ Media uploads (event posters/photos/avatars)
✅ File upload system
✅ QR code generation & scanning
✅ Live event updates
✅ Real-time attendance tracking
✅ Broadcasting system
✅ Pagination & breadcrumb navigation
✅ Dynamic role-based navigation
✅ Advanced search with multiple filters
✅ Calendar export functionality
✅ User management (admin)
✅ Email announcement system

**LATEST UPDATES:**
🔥 Real-time Features Implementation:
- WebSocket/Pusher integration
- Live notifications
- Real-time event updates
- Live attendance tracking
- Broadcasting events and channels

🔥 Enhanced UI/UX:
- Advanced search component
- Calendar integration
- Pagination system
- Breadcrumb navigation
- Dynamic navbar

🔥 Backend Enhancements:
- Broadcasting events
- File upload system
- QR code system
- Enhanced email system
- Admin management 

🧱 PHASE 2: SYSTEM DESIGN & DATABASE
1. Tech Stack Layer	Tech 
  Backend	Laravel 10 (PHP) 
  Frontend	vue 2 + Tailwind CSS @3 (Alpine.js optional) 
  Database	MySQL 
  File Storage	Laravel Storage local 
  Notifications	Laravel Mail (SMTP), 
  optional Push Optional	Livewire / Vue.js (for interactivity)
2. Database Schema (Simplified) 
  Tables: users — id, name, email, password, role (student, manager, admin) 
  events — id, title, description, date, time, location, status (pending/approved), created_by 
  event_registrations — id, user_id, event_id, qr_token, checked_in_at 
  feedback — id, event_id, user_id, rating, 
  comment notifications — id, user_id, title, body, read_at 
  event_media — id, event_id, file_path, type (poster/gallery) 

🧩 PHASE 3: FEATURE DEVELOPMENT 
🔐 1. User Management for auth (login/register/forgot)  
  Middleware-based Role system (isAdmin, isOrganizer, isStudent) 
  Admin-only user list with role management 
📅 2. Event Management 
For Organizers:  
  Create event (title, description, schedule, poster) 
  Edit/delete event (if not yet started) 
  View registration list  
For Admins:  
  Approve/Reject events 
  View User
  Feature events on homepage 
For Students: 
  Browse upcoming/past 
  events  Filter by date/category 
  Register (auto-generate QR code)  
  Unregister (before deadline) 
📥 3. Registration System ✅
  One-click register ✅
  QR code generated per user per event ✅ 
  View registered events in "My Events" section ✅
  QR code scanning for check-in ✅
📲 4. Notification System ✅
  Email confirmation on registration ✅
  Event reminder emails ✅
  Admin announcement broadcast ✅ 
  Optional SMS / push via OneSignal or Pusher (pending)
🗓 5. Calendar View (pending)
  Month/week view of events using FullCalendar.js 
📊 6. Admin Dashboard ✅
  Metrics: total events, total users, feedback ✅
  Export CSV of registrations ✅ 
  Logs of system activity (pending)
📷 7. Media Gallery ✅
  Upload event posters ✅ 
  Upload gallery images post-event ✅
  User avatar uploads ✅
📝 8. Feedback System ✅
  After attending, student can leave rating/comment ✅
  Admin can see average rating per event ✅  

💄 PHASE 4: FRONTEND ✅
UI/UX Tailwind CSS for clean, mobile-friendly layout ✅ 
Navigation bar with dynamic options based on role ✅
Event cards with filters: by date, club, popularity (basic done)
Modal forms for registration and feedback ✅
Responsive design for mobile + desktop ✅
File upload components ✅
User profile management ✅

🔧 ARCHITECTURE:
**Frontend (Vue.js 2):**
- Tailwind CSS for styling
- Vuex for state management
- Vue Router with guards
- Axios for API calls
- Pusher for real-time features
- FullCalendar for calendar views

**Backend (Laravel 10):**
- MySQL database
- Sanctum authentication
- Broadcasting with Pusher
- File storage system
- Email system (Gmail SMTP)
- QR code generation
- Role-based middleware

**Real-time Features:**
- Pusher WebSocket integration
- Broadcasting events
- Live notifications
- Real-time attendance tracking
- Live event updates

**Key Components:**
- Advanced search & filtering
- Calendar integration
- File upload system
- QR code system
- Email notifications
- Admin management
- User profile management
- Responsive design

**TECH STACK:**
- Frontend: Vue.js 2 + Tailwind CSS 3
- Backend: Laravel 10 + MySQL
- Real-time: Pusher WebSocket
- Email: Gmail SMTP
- File Storage: Laravel Storage
- Authentication: Laravel Sanctum

**LATEST MAJOR UPDATES:**
🚀 **Real-time Features Complete:**
- Pusher WebSocket integration
- Live notifications system
- Real-time event updates
- Live attendance tracking
- Broadcasting channels

🎨 **Enhanced UI/UX:**
- Advanced search with filters
- FullCalendar integration
- Pagination & breadcrumbs
- Dynamic role-based navigation
- Responsive design improvements

⚡ **Backend Enhancements:**
- Broadcasting events system
- Enhanced email notifications
- File upload capabilities
- QR code generation/scanning
- Admin management features

**ENVIRONMENT CONFIGURED:**
- Pusher credentials: App ID 2043057
- Gmail SMTP integration
- CORS and Sanctum setup
- Broadcasting channels
- API endpoints enhanced